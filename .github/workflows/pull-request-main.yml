name: Pulumi (PR Staging)
on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

env:
  DOMAIN: planx.club
  FULL_DOMAIN: ${{ github.event.number }}.planx.club
  VULTR_URL: https://${{ github.event.number }}.planx.club
  PULLREQUEST_ID: ${{ github.event.number }}

jobs:
  # integration_tests:
  #   name: Integration and E2E tests
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [14]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Cache .pnpm-store
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.pnpm-store
  #         key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
  #     - name: Install pnpm
  #       run: curl -f https://get.pnpm.io/v6.7.js | node - add --global pnpm@6
  #     - run: ./scripts/start-containers-for-tests.sh
  #     - run: ./hasura.planx.uk/run-postgres-tests.sh
  #     - run: pnpm install && pnpm test
  #       working-directory: hasura.planx.uk/tests
  #     - run: pnpm install && pnpm test
  #       working-directory: e2e

  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows#using-the-cache-action
      - name: NPM cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: PNPM cache
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm
        with:
          # pnpm cache files are stored in `~/.pnpm-store` on Linux/macOS
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm install -g pnpm
        working-directory: editor.planx.uk
      - run: pnpm install --frozen-lockfile
        working-directory: editor.planx.uk
      - run: pnpm test
        working-directory: editor.planx.uk
      - run: pnpm build
        working-directory: editor.planx.uk
        env:
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_ORDNANCE_SURVEY_FEATURES_KEY: ${{ secrets.ORDNANCE_SURVEY_FEATURES_KEY }}
          REACT_APP_API_URL: https://api.${{ env.DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.${{ env.DOMAIN }}
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.DOMAIN }}
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./editor.planx.uk/build
          if-no-files-found: error

  # deploy_to_netlify:
  #   name: Deploy to Netlify
  #   runs-on: ubuntu-latest
  #   needs: test_and_build
  #   steps:
  #     - name: Download Build Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: build
  #         path: ./build
  #     - name: Deploy to Netlify
  #       uses: nwtgck/actions-netlify@v1.2
  #       with:
  #         publish-dir: ./build
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         deploy-message: "Deploy from GitHub Actions"
  #       env:
  #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  #       timeout-minutes: 1

  # preview:
  #   name: Pulumi Preview
  #   needs: test_and_build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 1
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 14.x
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
  #         aws-region: eu-west-2
  #         aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
  #     - run: npm install -g pnpm
  #       working-directory: infrastructure/application
  #     - run: pnpm install --frozen-lockfile
  #       working-directory: infrastructure/application
  #     - name: Download Build Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: build
  #         path: ./editor.planx.uk/build
  #     - uses: pulumi/actions@v3
  #       with:
  #         command: preview
  #         stack-name: staging
  #         work-dir: infrastructure/application
  #         edit-pr-comment: true
  #       env:
  #         PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # hasura-change-summary:
  #   name: Hasura Change Summary
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: Fieldguide/action-hasura-change-summary@v2
  #       id: hasura-change
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         hasura_endpoint: https://hasura.editor.planx.dev
  #         project_dir: ./hasura.planx.uk
  #     - uses: marocchino/sticky-pull-request-comment@v2
  #       if: ${{ steps.hasura-change.outputs.change_html != '' }}
  #       with:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         header: hasura-change-summary
  #         message: ${{ steps.hasura-change.outputs.change_html }}
  #     - uses: marocchino/sticky-pull-request-comment@v2
  #       if: ${{ steps.hasura-change.outputs.change_html == '' }}
  #       with:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         header: hasura-change-summary
  #         delete: true

  create_or_update_vultr_instance:
    runs-on: ubuntu-latest
    needs: test_and_build
    steps:
      - if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: vultr
          message: |
            Creating vultr server...

      - if: github.event_name == 'pull_request' && github.event.action == 'opened'
        name: Create Server
        id: create
        uses: theopensystemslab/vultr-action@v1.4
        with:
          action: create
          api_key: ${{ secrets.VULTR_API_KEY }}
          domain: ${{ env.DOMAIN }}
          os_id: 387
          plan: vc2-1c-1gb
          pullrequest_id: ${{ env.PULLREQUEST_ID }}
          region: lhr
          tag: pullrequest

      - if: github.event_name == 'pull_request' && github.event.action == 'opened'
        name: Create commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ steps.create.outputs.default_password }}
          command_timeout: 20m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD
            SSH_PASSWORD=${{ secrets.SSH_PASSWORD }} sh scripts/pullrequest/create.sh

      - if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        name: Update commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          command_timeout: 20m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git add . && git stash
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD
            sh scripts/pullrequest/update.sh

      - uses: actions/checkout@master

      - name: upload built editor
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.VULTR_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          source: "editor.planx.uk/build"
          target: "build"

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: vultr
          message: |
            Deployed ${{ github.sha }} to ${{ env.VULTR_URL }}

  # finish-comment:
  #   uses: marocchino/sticky-pull-request-comment@v2
  #   needs: upload-artifact
  #   with:
  #     header: vultr
  #     message: |
  #       Deployed ${{ github.sha }} to <${{ env.VULTR_DOMAIN }}>
