name: Pulumi (PR Staging)
on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  integration_tests:
    name: Integration and E2E tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install pnpm
        run: curl -f https://get.pnpm.io/v6.7.js | node - add --global pnpm@6
      - run: ./scripts/start-containers-for-tests.sh
      - run: ./hasura.planx.uk/run-postgres-tests.sh
      - run: pnpm install && pnpm test
        working-directory: hasura.planx.uk/tests
      - run: pnpm install && pnpm test
        working-directory: e2e

  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows#using-the-cache-action
      - name: NPM cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: PNPM cache
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm
        with:
          # pnpm cache files are stored in `~/.pnpm-store` on Linux/macOS
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm install -g pnpm
        working-directory: editor.planx.uk
      - run: pnpm install --frozen-lockfile
        working-directory: editor.planx.uk
      - run: pnpm test
        working-directory: editor.planx.uk
      - run: pnpm build
        working-directory: editor.planx.uk
        env:
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
          REACT_APP_API_URL: https://api.editor.planx.dev
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.editor.planx.dev/v1/graphql
          REACT_APP_SHAREDB_URL: wss://sharedb.editor.planx.dev
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./editor.planx.uk/build
          if-no-files-found: error

  deploy_to_netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: test_and_build
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./build
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: ./build
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1

  preview:
    name: Pulumi Preview
    needs: test_and_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-2
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      - run: npm install -g pnpm
        working-directory: infrastructure/application
      - run: pnpm install --frozen-lockfile
        working-directory: infrastructure/application
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./editor.planx.uk/build
      - uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: staging
          work-dir: infrastructure/application
          edit-pr-comment: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
