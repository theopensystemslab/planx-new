name: Pulumi (PR Staging)
on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

env:
  DOMAIN: planx.pizza
  FULL_DOMAIN: ${{ github.event.number }}.planx.pizza
  VULTR_URL: https://${{ github.event.number }}.planx.pizza
  PULLREQUEST_ID: ${{ github.event.number }}
  EDITOR_DIRECTORY: editor.planx.uk
  TLS_EMAIL: devops@opensystemslab.io

jobs:
  integration_tests:
    name: Integration and E2E tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.13.0
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - name: Setup Tests
        run: ./scripts/start-containers-for-tests.sh
      - name: Postgres Tests
        run: ./hasura.planx.uk/run-postgres-tests.sh
      - name: Hasura Tests
        run: pnpm install && pnpm test
        working-directory: hasura.planx.uk/tests
      - name: E2E Tests
        run: pnpm install && pnpm test
        working-directory: e2e

  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.13.0
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm test
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm build
        working-directory: ${{ env.EDITOR_DIRECTORY }}
        env:
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          REACT_APP_API_URL: https://api.${{ env.FULL_DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_GOOGLE_OAUTH_OVERRIDE: https://api.editor.planx.dev
          REACT_APP_HASURA_URL: https://hasura.${{ env.FULL_DOMAIN }}/v1/graphql
          REACT_APP_ORDNANCE_SURVEY_FEATURES_KEY: ${{ secrets.ORDNANCE_SURVEY_FEATURES_KEY }}
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.FULL_DOMAIN }}
      - run: pnpm build-storybook
        working-directory: ${{ env.EDITOR_DIRECTORY }}
        # same env as above, if it's job.env it can't access existing env.[variable]
        env:
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          REACT_APP_API_URL: https://api.${{ env.FULL_DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_GOOGLE_OAUTH_OVERRIDE: https://api.editor.planx.dev
          REACT_APP_HASURA_URL: https://hasura.${{ env.FULL_DOMAIN }}/v1/graphql
          REACT_APP_ORDNANCE_SURVEY_FEATURES_KEY: ${{ secrets.ORDNANCE_SURVEY_FEATURES_KEY }}
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.FULL_DOMAIN }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          if-no-files-found: error

  preview:
    name: Pulumi Preview
    needs: [integration_tests, test_and_build]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-2
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}

      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.13.0
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install
        working-directory: infrastructure/application

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./${{ env.EDITOR_DIRECTORY }}/build
      - uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: staging
          work-dir: infrastructure/application
          edit-pr-comment: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  hasura-change-summary:
    name: Hasura Change Summary
    runs-on: ubuntu-latest
    needs: [integration_tests, test_and_build]
    steps:
      - uses: actions/checkout@v2
      - uses: Fieldguide/action-hasura-change-summary@v2
        id: hasura-change
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          hasura_endpoint: https://hasura.editor.planx.dev
          project_dir: ./hasura.planx.uk
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.hasura-change.outputs.change_html != '' }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: hasura-change-summary
          message: ${{ steps.hasura-change.outputs.change_html }}
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.hasura-change.outputs.change_html == '' }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: hasura-change-summary
          delete: true

  create_or_update_vultr_instance:
    name: Create or Update Vultr Instance
    runs-on: ubuntu-latest
    needs: [integration_tests, test_and_build]
    steps:
      # CREATE STEPS

      # - if: github.event_name == 'pull_request' && github.event.action == 'opened'
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   with:
      #     header: vultr
      #     message: |
      #       Creating vultr server...

      # - if: github.event_name == 'pull_request' && github.event.action == 'opened'
      #   name: Create Server
      #   id: create
      #   uses: theopensystemslab/vultr-action@v1.4
      #   with:
      #     action: create
      #     api_key: ${{ secrets.VULTR_API_KEY }}
      #     domain: ${{ env.DOMAIN }}
      #     os_id: 387
      #     plan: vc2-1c-1gb
      #     pullrequest_id: ${{ env.PULLREQUEST_ID }}
      #     region: lhr
      #     tag: pullrequest

      # - if: github.event_name == 'pull_request' && github.event.action == 'opened'
      #   name: Create commands
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ env.FULL_DOMAIN }}
      #     username: root
      #     password: ${{ steps.create.outputs.default_password }}
      #     command_timeout: 20m
      #     script: |
      #       git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
      #       cd planx-new
      #       git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD

      # # HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      # # API_URL_EXT: ${API_URL_EXT}
      # AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      # AWS_S3_ACL: ${AWS_S3_ACL}
      # AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      # AWS_S3_REGION: ${AWS_S3_REGION}
      # AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      # BOPS_API_ROOT_DOMAIN: ${BOPS_API_ROOT_DOMAIN}
      # BOPS_API_TOKEN: ${BOPS_API_TOKEN}
      # # EDITOR_URL_EXT: ${EDITOR_URL_EXT}
      # # GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      # # GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE: ${GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE}
      # GOV_UK_PAY_TOKEN_LAMBETH: ${GOV_UK_PAY_TOKEN_LAMBETH}
      # GOV_UK_PAY_TOKEN_SOUTHWARK: ${GOV_UK_PAY_TOKEN_SOUTHWARK}
      # # HASURA_GRAPHQL_URL: http://hasura:8080/v1/graphql

      #       ROOT_DOMAIN=$(hostname) \
      #       SSH_PASSWORD=${{ secrets.SSH_PASSWORD }} \
      #       TLS_EMAIL=${{ env.TLS_EMAIL }} \
      #       sh scripts/pullrequest/create.sh

      # UPDATE STEPS

      - if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        name: Update commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          command_timeout: 10m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git add . && git stash
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD

            # # HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
            # # API_URL_EXT: ${API_URL_EXT}
            # AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
            # AWS_S3_ACL: ${AWS_S3_ACL}
            # AWS_S3_BUCKET: ${AWS_S3_BUCKET}
            # AWS_S3_REGION: ${AWS_S3_REGION}
            # AWS_SECRET_KEY: ${AWS_SECRET_KEY}
            # BOPS_API_ROOT_DOMAIN: ${BOPS_API_ROOT_DOMAIN}
            # BOPS_API_TOKEN: ${BOPS_API_TOKEN}
            # # EDITOR_URL_EXT: ${EDITOR_URL_EXT}
            # # GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
            # # GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            # GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE: ${GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE}
            # GOV_UK_PAY_TOKEN_LAMBETH: ${GOV_UK_PAY_TOKEN_LAMBETH}
            # GOV_UK_PAY_TOKEN_SOUTHWARK: ${GOV_UK_PAY_TOKEN_SOUTHWARK}
            # # HASURA_GRAPHQL_URL: http://hasura:8080/v1/graphql

            JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }} \

            # # PORT: ${API_PORT}

            SESSION_SECRET=${{ secrets.STAGING_SESSION_SECRET }} \

            ROOT_DOMAIN=$(hostname) \
            TLS_EMAIL=${{ env.TLS_EMAIL }} \
            sh scripts/pullrequest/update.sh

      # CREATE & UPDATE STEPS

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./build

      - name: upload built editor
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          source: "./build"
          target: "planx-new/${{ env.EDITOR_DIRECTORY }}"
          overwrite: true

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: vultr
          message: |
            Deployed ${{ github.sha }} to ${{ env.VULTR_URL }}
