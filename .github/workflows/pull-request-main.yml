name: Pulumi (PR Staging)
on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

env:
  DOMAIN: planx.pizza
  FULL_DOMAIN: ${{ github.event.number }}.planx.pizza
  PULLREQUEST_ID: ${{ github.event.number }}
  EDITOR_DIRECTORY: editor.planx.uk
  PNPM_VERSION: 6.24.1
  NODE_VERSION: 16.13.1 # 16.13.1 = LTS

jobs:
  integration_tests:
    name: Integration and E2E tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: ./scripts/start-containers-for-tests.sh
      - run: ./hasura.planx.uk/run-postgres-tests.sh
      - run: pnpm i -g hasura-cli
      - name: Hasura Tests
        run: pnpm install && pnpm test
        working-directory: hasura.planx.uk/tests
      - name: E2E Tests
        run: pnpm install && pnpm test
        working-directory: e2e

  api_tests:
    name: API Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: Run API Tests
        run: pnpm install && pnpm test
        working-directory: api.planx.uk

  test_and_build:
    name: Test and Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm test
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm build
        working-directory: ${{ env.EDITOR_DIRECTORY }}
        env:
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          REACT_APP_API_URL: https://api.${{ env.FULL_DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.${{ env.FULL_DOMAIN }}/v1/graphql
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.FULL_DOMAIN }}
          # needed because there's no API to change google's allowed OAuth URLs
          REACT_APP_GOOGLE_OAUTH_OVERRIDE: https://api.editor.planx.dev
      - run: pnpm build-storybook
        working-directory: ${{ env.EDITOR_DIRECTORY }}
        # same env as above, if it's job.env it can't access existing env.[variable]
        env:
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          REACT_APP_API_URL: https://api.${{ env.FULL_DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.${{ env.FULL_DOMAIN }}/v1/graphql
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.FULL_DOMAIN }}
          REACT_APP_GOOGLE_OAUTH_OVERRIDE: https://api.editor.planx.dev
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          if-no-files-found: error

  preview:
    name: Pulumi Preview
    needs: [integration_tests, test_and_build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-2
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install
        working-directory: infrastructure/application
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./${{ env.EDITOR_DIRECTORY }}/build
      - uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: staging
          work-dir: infrastructure/application
          edit-pr-comment: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  hasura-change-summary:
    name: Hasura Change Summary
    needs: [integration_tests, test_and_build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: Fieldguide/action-hasura-change-summary@v2
        id: hasura-change
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          hasura_endpoint: https://hasura.${{ env.FULL_DOMAIN }}
          project_dir: ./hasura.planx.uk
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.hasura-change.outputs.change_html != '' }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: hasura-change-summary
          message: ${{ steps.hasura-change.outputs.change_html }}
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.hasura-change.outputs.change_html == '' }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: hasura-change-summary
          delete: true

  create_or_update_vultr_instance:
    # XXX: Does nothing if the pizza instance or DNS entries exist,
    #      see https://github.com/theopensystemslab/planx-new/pull/725
    name: Create or Update Vultr Instance
    needs: [integration_tests, api_tests, test_and_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Create Pizza (if it doesn't exist)
        id: create
        uses: theopensystemslab/vultr-action@v1.15
        with:
          action: create
          api_key: ${{ secrets.VULTR_API_KEY }}
          domain: ${{ env.DOMAIN }}
          os_id: 387
          plan: vc2-1c-1gb
          pullrequest_id: ${{ env.PULLREQUEST_ID }}
          region: lhr
          tag: pullrequest

      # CREATE STEPS

      - if: steps.create.outputs.ip_address != null
        name: Create commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ steps.create.outputs.default_password }}
          command_timeout: 20m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD

            echo "
            ROOT_DOMAIN=${{ env.FULL_DOMAIN }}
            JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
            SESSION_SECRET=${{ secrets.STAGING_SESSION_SECRET }}
            BOPS_API_TOKEN=${{ secrets.STAGING_BOPS_API_TOKEN }}
            GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE=${{ secrets.STAGING_GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE }}
            GOV_UK_PAY_TOKEN_LAMBETH=${{ secrets.STAGING_GOV_UK_PAY_TOKEN_LAMBETH }}
            GOV_UK_PAY_TOKEN_SOUTHWARK=${{ secrets.STAGING_GOV_UK_PAY_TOKEN_SOUTHWARK }}
            UNIFORM_TOKEN_URL=https://staging.identity.idoxgroup.com/uaa/oauth/token
            UNIFORM_SUBMISSION_URL=https://staging.identity.idoxgroup.com/agw/submission-api
            UNIFORM_CLIENT_AYLESBURY_VALE=${{ secrets.STAGING_UNIFORM_CLIENT_AYLESBURY_VALE }}
            UNIFORM_CLIENT_CHILTERN=${{ secrets.STAGING_UNIFORM_CLIENT_CHILTERN }}
            UNIFORM_CLIENT_SOUTH_BUCKS=${{ secrets.STAGING_UNIFORM_CLIENT_SOUTH_BUCKS }}
            UNIFORM_CLIENT_WYCOMBE=${{ secrets.STAGING_UNIFORM_CLIENT_WYCOMBE }}
            UNIFORM_CLIENT_SOUTHWARK=${{ secrets.STAGING_UNIFORM_CLIENT_SOUTHWARK }}
            UNIFORM_CLIENT_LAMBETH=${{ secrets.STAGING_UNIFORM_CLIENT_LAMBETH }}
            " > .env.temp
            cat .env .env.temp .env.staging > .env.prod

            SSH_PASSWORD=${{ secrets.SSH_PASSWORD }} sh scripts/pullrequest/create.sh

      # UPDATE STEPS

      - if: steps.create.outputs.ip_address == null
        name: Update commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          command_timeout: 10m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git add . && git stash
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD

            echo "
            ROOT_DOMAIN=${{ env.FULL_DOMAIN }}
            JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
            SESSION_SECRET=${{ secrets.STAGING_SESSION_SECRET }}
            BOPS_API_TOKEN=${{ secrets.STAGING_BOPS_API_TOKEN }}
            GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE=${{ secrets.STAGING_GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE }}
            GOV_UK_PAY_TOKEN_LAMBETH=${{ secrets.STAGING_GOV_UK_PAY_TOKEN_LAMBETH }}
            GOV_UK_PAY_TOKEN_SOUTHWARK=${{ secrets.STAGING_GOV_UK_PAY_TOKEN_SOUTHWARK }}
            UNIFORM_TOKEN_URL=https://staging.identity.idoxgroup.com/uaa/oauth/token
            UNIFORM_SUBMISSION_URL=https://staging.identity.idoxgroup.com/agw/submission-api
            UNIFORM_CLIENT_AYLESBURY_VALE=${{ secrets.STAGING_UNIFORM_CLIENT_AYLESBURY_VALE }}
            UNIFORM_CLIENT_CHILTERN=${{ secrets.STAGING_UNIFORM_CLIENT_CHILTERN }}
            UNIFORM_CLIENT_SOUTH_BUCKS=${{ secrets.STAGING_UNIFORM_CLIENT_SOUTH_BUCKS }}
            UNIFORM_CLIENT_WYCOMBE=${{ secrets.STAGING_UNIFORM_CLIENT_WYCOMBE }}
            UNIFORM_CLIENT_SOUTHWARK=${{ secrets.STAGING_UNIFORM_CLIENT_SOUTHWARK }}
            UNIFORM_CLIENT_LAMBETH=${{ secrets.STAGING_UNIFORM_CLIENT_LAMBETH }}
            " > .env.temp
            cat .env .env.temp .env.staging > .env.prod

            sh scripts/pullrequest/update.sh

      # CREATE & UPDATE STEPS

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./build

      - name: upload built editor
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          source: "./build"
          target: "planx-new/${{ env.EDITOR_DIRECTORY }}"
          overwrite: true

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: vultr
          message: |
            Deployed ${{ github.sha }} to https://${{ env.FULL_DOMAIN }}

  healthcheck:
    name: Healthcheck Pizza Services
    needs: [create_or_update_vultr_instance]
    runs-on: ubuntu-20.04
    steps:
      - name: API healthcheck
        run: |
          curl --fail -sv --retry 5 --retry-delay 30 --retry-connrefused https://api.${{ env.FULL_DOMAIN }}
      - name: Hasura healthcheck
        run: |
          curl --fail -sv --retry 5 --retry-delay 30 --retry-connrefused https://hasura.${{ env.FULL_DOMAIN }}/healthz
      - name: Editor healthcheck
        run: |
          curl --fail -sv --retry 5 --retry-delay 30 --retry-connrefused https://${{ env.FULL_DOMAIN }}
