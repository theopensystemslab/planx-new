name: Pull Request
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

env:
  DOMAIN: planx.pizza
  FULL_DOMAIN: ${{ github.event.number }}.planx.pizza
  PULLREQUEST_ID: ${{ github.event.number }}
  EDITOR_DIRECTORY: editor.planx.uk
  PNPM_VERSION: 7.8.0
  NODE_VERSION: 16.13.1 # 16.13.1 = LTS

jobs:
  changes:
    name: Check file changes
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.filter.outputs.api }}
      e2e: ${{ steps.filter.outputs.e2e }}
      editor: ${{ steps.filter.outputs.editor }}
      hasura: ${{ steps.filter.outputs.hasura }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      sharedb: ${{ steps.filter.outputs.sharedb }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api.planx.uk/**'
            e2e:
              - 'e2e/**'
            hasura:
              - 'hasura.planx.uk/**'
            infrastructure:
              - 'infrastructure/**'
            editor:
              - 'editor.planx.uk/**'
            sharedb:
              - 'sharedb.planx.uk/**'

  integration_tests:
    name: Run Integration tests
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.api == 'true' || needs.changes.outputs.e2e == 'true' || needs.changes.outputs.editor == 'true' || needs.changes.outputs.sharedb == 'true' || needs.changes.outputs.hasura == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIZZA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIZZA_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Copy .env files from Staging S3 to the current working directory with AWS CLI
        run: ./scripts/pull-secrets.sh
      - name: Check if .env files exist
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ".env, .env.staging, api.planx.uk/.env.test, hasura.planx.uk/.env.test"
          fail: true
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install --frozen-lockfile
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - name: Start test containers
        run: ./scripts/start-containers-for-tests.sh
      - name: Postgres Tests
        run: ./hasura.planx.uk/run-postgres-tests.sh
      - run: pnpm i -g hasura-cli
      - name: Hasura Tests
        run: pnpm install --frozen-lockfile && pnpm test
        working-directory: hasura.planx.uk/tests
      - name: Cypress Tests
        run: pnpm install --frozen-lockfile && pnpm test:cypress
        working-directory: e2e

  api_tests:
    name: Run API Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: [changes]
    if: ${{ needs.changes.outputs.api == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIZZA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIZZA_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Copy .env files from Staging S3 to the current working directory with AWS CLI
        run: ./scripts/pull-secrets.sh
      - name: Check if .env files exist
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ".env, .env.staging, api.planx.uk/.env.test, hasura.planx.uk/.env.test"
          fail: true
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: Run API Tests
        run: pnpm install --frozen-lockfile && pnpm lint --quiet && pnpm test
        working-directory: api.planx.uk

  test_react:
    name: Run React Tests
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.editor == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIZZA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIZZA_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Copy .env files from Staging S3 to the current working directory with AWS CLI
        run: ./scripts/pull-secrets.sh
      - name: Check if .env files exist
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ".env, .env.staging, api.planx.uk/.env.test, hasura.planx.uk/.env.test"
          fail: true
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install --frozen-lockfile
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm test
        working-directory: ${{ env.EDITOR_DIRECTORY }}

  build_react_app:
    name: Build React App
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache build assets
        id: cache-react-build-assets
        uses: actions/cache@v3
        with:
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          key: ${{ runner.os }}-${{ hashFiles('editor.planx.uk/**', '!editor.planx/build/**') }}-react
      - uses: pnpm/action-setup@v2.2.2
        if: steps.cache-react-build-assets.outputs.cache-hit != 'true'
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        if: steps.cache-react-build-assets.outputs.cache-hit != 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install --frozen-lockfile
        if: steps.cache-react-build-assets.outputs.cache-hit != 'true'
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm build
        if: steps.cache-react-build-assets.outputs.cache-hit != 'true'
        working-directory: ${{ env.EDITOR_DIRECTORY }}
        env:
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          REACT_APP_API_URL: https://api.${{ env.FULL_DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.${{ env.FULL_DOMAIN }}/v1/graphql
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.FULL_DOMAIN }}
          # needed because there's no API to change google's allowed OAuth URLs
          REACT_APP_GOOGLE_OAUTH_OVERRIDE: https://api.editor.planx.dev

  build_storybook:
    name: Build Storybook
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache build assets
        id: cache-storybook-assets
        uses: actions/cache@v3
        with:
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          key: ${{ runner.os }}-${{ hashFiles('editor.planx.uk/**', '!editor.planx/build/**') }}-storybook
      - uses: pnpm/action-setup@v2.2.2
        if: steps.cache-storybook-assets.outputs.cache-hit != 'true'
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        if: steps.cache-storybook-assets.outputs.cache-hit != 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install --frozen-lockfile
        if: steps.cache-storybook-assets.outputs.cache-hit != 'true'
        working-directory: ${{ env.EDITOR_DIRECTORY }}
      - run: pnpm build-storybook
        if: steps.cache-storybook-assets.outputs.cache-hit != 'true'
        working-directory: ${{ env.EDITOR_DIRECTORY }}
        # same env as above, if it's job.env it can't access existing env.[variable]
        env:
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          REACT_APP_API_URL: https://api.${{ env.FULL_DOMAIN }}
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.${{ env.FULL_DOMAIN }}/v1/graphql
          REACT_APP_SHAREDB_URL: wss://sharedb.${{ env.FULL_DOMAIN }}
          REACT_APP_GOOGLE_OAUTH_OVERRIDE: https://api.editor.planx.dev

  pulumi_preview:
    name: Run Pulumi Preview
    runs-on: ubuntu-20.04
    needs: [changes, build_react_app]
    if: ${{ needs.changes.outputs.infrastructure == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-2
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - run: pnpm install --frozen-lockfile
        working-directory: infrastructure/application
      - name: Download React build assets
        id: cache-react-build-assets
        uses: actions/cache@v3
        with:
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          key: ${{ runner.os }}-${{ hashFiles('editor.planx.uk/**', '!editor.planx/build/**') }}-react
      - uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: staging
          work-dir: infrastructure/application
          edit-pr-comment: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  hasura-change-summary:
    name: Generate Hasura Change Summary
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.hasura == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - uses: Fieldguide/action-hasura-change-summary@v2
        id: hasura-change
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          hasura_endpoint: https://hasura.${{ env.FULL_DOMAIN }}
          project_dir: ./hasura.planx.uk
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{steps.hasura-change.outputs.change_html != ''}}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: hasura-change-summary
          message: ${{ steps.hasura-change.outputs.change_html }}
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.hasura-change.outputs.change_html == '' }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: hasura-change-summary
          delete: true

  create_or_update_vultr_instance:
    name: Upsert Vultr Instance
    needs: [build_react_app, build_storybook]
    runs-on: ubuntu-20.04
    steps:
      - name: Create Pizza (if it doesn't exist)
        id: create
        uses: theopensystemslab/vultr-action@v1.15
        with:
          action: create
          api_key: ${{ secrets.VULTR_API_KEY }}
          domain: ${{ env.DOMAIN }}
          os_id: 387
          plan: vc2-1c-1gb
          pullrequest_id: ${{ env.PULLREQUEST_ID }}
          region: lhr
          tag: pullrequest

      # CREATE STEPS

      - if: steps.create.outputs.ip_address != null
        name: Create commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ steps.create.outputs.default_password }}
          command_timeout: 20m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD

            apt-get install awscli -y
            export AWS_ACCESS_KEY_ID=${{ secrets.PIZZA_AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.PIZZA_AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=eu-west-2

            ./scripts/pull-secrets.sh

            echo "
            ROOT_DOMAIN=${{ env.FULL_DOMAIN }}
            " > .env.temp
            cat .env .env.temp .env.staging > .env.prod

            SSH_PASSWORD=${{ secrets.SSH_PASSWORD }} sh scripts/pullrequest/create.sh

      # UPDATE STEPS

      - if: steps.create.outputs.ip_address == null
        name: Update commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          command_timeout: 10m
          script: |
            git clone "${{ secrets.AUTHENTICATED_REPO_URL }}"
            cd planx-new
            git add . && git stash
            git fetch origin "pull/${{ env.PULLREQUEST_ID }}/head" && git checkout FETCH_HEAD

            apt-get install awscli -y
            export AWS_ACCESS_KEY_ID=${{ secrets.PIZZA_AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.PIZZA_AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=eu-west-2

            ./scripts/pull-secrets.sh

            echo "
            ROOT_DOMAIN=${{ env.FULL_DOMAIN }}
            " > .env.temp
            cat .env .env.temp .env.staging > .env.prod

            sh scripts/pullrequest/update.sh

      # CREATE & UPDATE STEPS


      - uses: actions/checkout@v2
      - name: Download React build assets
        id: cache-react-build-assets
        uses: actions/cache@v3
        with:
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          key: ${{ runner.os }}-${{ hashFiles('editor.planx.uk/**', '!editor.planx/build/**') }}-react
      - name: Download Storybook build assets
        id: cache-storybook-assets
        uses: actions/cache@v3
        with:
          path: ./${{ env.EDITOR_DIRECTORY }}/build
          key: ${{ runner.os }}-${{ hashFiles('editor.planx.uk/**', '!editor.planx/build/**') }}-storybook
      - name: upload built editor
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.FULL_DOMAIN }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          source: "./${{ env.EDITOR_DIRECTORY }}/build"
          target: "planx-new/"
          overwrite: true

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: vultr
          message: |
            ## Pizza

            Deployed ${{ github.sha }} to https://${{ env.FULL_DOMAIN }}.

            Useful links:
              - [Editor](https://${{ env.FULL_DOMAIN }})
              - [Storybook](https://${{ env.FULL_DOMAIN }}/storybook)
              - [Hasura](https://hasura.${{ env.FULL_DOMAIN }})
              - [API](https://api.${{ env.FULL_DOMAIN }})
              - [ShareDB](https://sharedb.${{ env.FULL_DOMAIN }})

  healthcheck:
    name: Run Healthcheck on Pizza Services
    needs: [create_or_update_vultr_instance]
    runs-on: ubuntu-20.04
    steps:
      - name: API healthcheck
        run: |
          timeout 150s bash -c "until curl --fail https://api.${{ env.FULL_DOMAIN }}; do sleep 1; done"
      - name: Hasura healthcheck
        run: |
          timeout 150s bash -c "until curl --fail https://hasura.${{ env.FULL_DOMAIN }}/healthz; do sleep 1; done"
      - name: Editor healthcheck
        run: |
          timeout 150s bash -c "until curl --fail https://${{ env.FULL_DOMAIN }}; do sleep 1; done"

  lighthouse:
    name: Lighthouse
    needs: [create_or_update_vultr_instance]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v9
        id: LHCIAction
        with:
          urls: | 
            https://${{ env.FULL_DOMAIN }}/buckinghamshire/find-out-if-you-need-planning-permission/preview
            https://${{ env.FULL_DOMAIN }}/testing/lighthouse-canary-flow/unpublished
          # budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
      - name: Interpolate comment text
        id: text
        uses: actions/github-script@v6
        with:
          script: |
            const links = JSON.parse('${{steps.LHCIAction.outputs.links}}');
            const manifests = JSON.parse('${{steps.LHCIAction.outputs.manifest}}');
            const text = manifests
              .map((m) => `> ${m.url}\n${getMarkdown(m.summary)}\n- [Full report](${links[m.url]})`)
              .join("\n\n");
            core.setOutput("text", `## Lighthouse\n\n${text}`);

            function getMarkdown(summary) {
              return Object.entries(summary)
                .map(([name, value]) => `- ${name}: ${value}`)
                .join("\n");
            }
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lighthouse
          message: ${{steps.text.outputs.text}}
