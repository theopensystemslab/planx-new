name: Pulumi (Deploy Production)
on:
  push:
    branches:
      - production

# When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress,
# the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled.
concurrency: production_environment

env:
  DEPLOYMENT_ENVIRONMENT: production

jobs:
  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows#using-the-cache-action
      - name: NPM cache
        uses: actions/cache@v2
        env:
          cache-name: cache-npm
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: PNPM cache
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm
        with:
          # pnpm cache files are stored in `~/.pnpm-store` on Linux/macOS
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm install -g pnpm
        working-directory: editor.planx.uk
      - run: pnpm install --frozen-lockfile
        working-directory: editor.planx.uk
      - run: pnpm test
        working-directory: editor.planx.uk
      - run: pnpm build
        working-directory: editor.planx.uk
        env:
          REACT_APP_ORDNANCE_SURVEY_KEY: ${{ secrets.ORDNANCE_SURVEY_KEY }}
          REACT_APP_API_URL: https://api.editor.planx.uk
          REACT_APP_FEEDBACK_FISH_ID: 65f02de00b90d1
          REACT_APP_HASURA_URL: https://hasura.editor.planx.uk/v1/graphql
          REACT_APP_SHAREDB_URL: wss://sharedb.editor.planx.uk
          REACT_APP_AIRBRAKE_PROJECT_ID: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          REACT_APP_AIRBRAKE_PROJECT_KEY: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./editor.planx.uk/build
          if-no-files-found: error

  preview:
    name: Pulumi Up
    needs: test_and_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-region: eu-west-2
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
      - run: npm install -g pnpm
        working-directory: infrastructure/application
      - run: pnpm install --frozen-lockfile
        working-directory: infrastructure/application
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./editor.planx.uk/build
      - uses: pulumi/actions@v3
        with:
          command: up
          stack-name: production
          work-dir: infrastructure/application
          edit-pr-comment: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  notifications:
    name: Notifications
    needs: preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Airbrake notification - https://airbrake.io/docs/features/deploy-tracking
      - name: Notify Airbrake of deploy
        id: airbrake-deploy
        uses: mtchavez/airbrake-deploy@v1
        with:
          project-id: ${{ secrets.AIRBRAKE_PROJECT_ID }}
          project-key: ${{ secrets.AIRBRAKE_PROJECT_KEY }}
          environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
          repository: https://github.com${{ github.repo }}
          revision: ${{ github.sha }}
          user: ${{ github.actor }}
      - name: Get Airbrake deploy response
        run: echo "The response was ${{ steps.airbrake-deploy.outputs.response }}"
      # Slack deployment notification
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${{ env.DEPLOYMENT_ENVIRONMENT }} deploy
          SLACK_WEBHOOK: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK }}
