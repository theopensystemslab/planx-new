---
import { fetchAllLPAs } from "@lib/lpa-api";
import Layout from "@layouts/Layout.astro";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import ServiceCard from "@components/ServiceCard.astro";
import LpaMasthead from "@components/LpaMasthead.astro";
import Container from "@components/Container.astro";
import Accordion from "@components/Accordion.astro";
import ApplicationsBanner from "@components/ApplicationsBanner.astro";

export const getStaticPaths = (async () => {
  const lpas = await fetchAllLPAs();
  return lpas.map((lpa) => ({
    params: { lpa: lpa.slug },
    props: { lpaData: lpa },
  }));
}) satisfies GetStaticPaths;

const { lpaData } = Astro.props;

// TODO: Pass title as prop into layout?
// type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

if (!lpaData) return Astro.redirect("/404");

// Fallback message function
const getFallbackMessage = (serviceType: string) => 
  `Currently there are no ${serviceType} services offered by ${lpaData.name}.`;
---

<Layout>
  <LpaMasthead
    title="Local planning services offered by {lpaName}"
    lpaName={lpaData.name}
    logo={lpaData.theme.logo}
    backgroundColour={lpaData.theme?.primaryColour}
  />
  <Container>
    <div class="flex flex-col gap-4 clamp-[py,4,6]">
      <Accordion title="Start a planning application" id="apply-accordion">
        {lpaData.applyServices && lpaData.applyServices.length > 0 ? (
          <ul class="flex flex-col gap-4">
            {lpaData.applyServices.map((service) => (
              <ServiceCard
                service={service}
                team={{ domain: lpaData.domain }}
              />
            ))}
          </ul>
        ) : (
          <p class="text-body-xl m-0 clamp-[px,1,2] py-4">
            {getFallbackMessage("planning application")}
          </p>
        )}
      </Accordion>
      
      <Accordion title="Notify your authority" id="notify-accordion">
        {lpaData.notifyServices && lpaData.notifyServices.length > 0 ? (
          <ul class="flex flex-col gap-4">
            {lpaData.notifyServices.map((service) => (
              <ServiceCard
                service={service}
                team={{ domain: lpaData.domain }}
              />
            ))}
          </ul>
        ) : (
          <p class="text-body-xl m-0 clamp-[px,1,2] py-4">
            {getFallbackMessage("notification")}
          </p>
        )}
      </Accordion>
      
      <Accordion title="Get planning guidance" id="guidance-accordion">
        {lpaData.guidanceServices && lpaData.guidanceServices.length > 0 ? (
          <ul class="flex flex-col gap-4">
            {lpaData.guidanceServices.map((service) => (
              <ServiceCard
                service={service}
                team={{ domain: lpaData.domain }}
              />
            ))}
          </ul>
        ) : (
          <p class="text-body-xl m-0 clamp-[px,1,2] py-4">
            {getFallbackMessage("planning guidance")}
          </p>
        )}
      </Accordion>
    </div>
  </Container>
  <ApplicationsBanner />
</Layout>

<script>
  import { $action } from "@stores/action";

  /**
   * Open accordion based on "action" value from nanostore
   * Defaults to all accordions closed
   */
  const openAccordion = () => {
    const action = $action.get();
    if (!action) return;

    const detailsEl = document.getElementById(
      `${action}-accordion`
    ) as HTMLDetailsElement | null;
    if (!detailsEl) return;

    detailsEl.open = true;
    detailsEl.scrollIntoView({ behavior: "smooth" });

    // Clear store - we've now used this action, it can only be reset by landing page cards
    $action.set(null);
  };

  document.addEventListener("astro:page-load", () => {
    openAccordion();
  });
</script>
