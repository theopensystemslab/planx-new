# HASURA_PROXY_PORT - The publicly exposed port through which this service can be accessed
# HASURA_NETWORK_LOCATION - Either "hasura" in Docker environments, or "localhost" on Fargate
# API_NETWORK_LOCATION - Either "http://api:${API_PORT}" in Docker environments, or external API URL on Fargate

# General options
{
	# Handle HTTPS redirection in AWS at the LoadBalancer level
	auto_https off
}

(security_headers) {
	header {
		# Enable HSTS
		Strict-Transport-Security "max-age=15552000; includeSubDomains"

		# Disable clients from sniffing the media type
		X-Content-Type-Options nosniff

		# Clickjacking protection
		X-Frame-Options DENY

		# Do not leak server information
		-Server
	}
}

# Forward requests which require authorisation along to our REST API's JWT validation endpoint
# This checks if the incoming JWT is revoked
# Further validation and permissions checks still actioned by Hasura in JWT auth mode
(validate_jwt) {
	rewrite * /auth/validate-jwt

	# Forward to validation service
	reverse_proxy {$API_NETWORK_LOCATION} {
		method GET
		header_up X-Original-URI {http.request.orig_uri.path}

		@success status 2xx

		# Restore original path, then proxy original request to Hasura
		handle_response @success {
			import security_headers
			header X-Auth-Validated true

			rewrite * {http.request.orig_uri.path}
			reverse_proxy {$HASURA_NETWORK_LOCATION}:8080
		}

		handle_response {
			import security_headers
			header X-Auth-Validated false

			respond 401 {
				body "Unauthorized - expired or invalid token"
			}
		}
	}
}

# Reverse proxy for Hasura GraphQL Engine
:{$HASURA_PROXY_PORT} {

	# Validation conditions match getToken() in REST API
	# Please see api.planx.uk/modules/auth/middleware.ts
	@hasTokenAuth {
		header_regexp Authorization "^Bearer (\S+)$"
	}

	@hasTokenCookie {
		header_regexp Cookie jwt=([^;]+)
	}

	@hasTokenQuery {
		query token=*
	}

	handle @hasTokenAuth {
		import validate_jwt
	}

	handle @hasTokenCookie {
		import validate_jwt
	}

	handle @hasTokenQuery {
		import validate_jwt
	}

	# Default route for public requests
	handle {
		import security_headers
		header X-Auth-Validated skip

		reverse_proxy {$HASURA_NETWORK_LOCATION}:8080
	}
}
