import { flatFlags, IndexedNode } from "@opensystemslab/planx-core/types";
import { FuseOptionKey, FuseOptionKeyObject } from "fuse.js";
import { get } from "lodash";

export type SearchFacets = Array<FuseOptionKey<IndexedNode>>;

const generalData: SearchFacets = ["data.fn", "data.val"];

const fileUploadAndLabelData: SearchFacets = ["data.fileTypes.fn"];

const calculateData: SearchFacets = [
  {
    name: "formula",
    getFn: (node: IndexedNode) => Object.keys(node.data?.defaults || {}),
  },
];

const listData: SearchFacets = [
  "data.schema.fields.data.fn",
  "data.schema.fields.data.options.data.val",
];

/** Data fields used across PlanX components */
export const DATA_FACETS: SearchFacets = [
  ...generalData,
  ...fileUploadAndLabelData,
  ...calculateData,
  ...listData,
];

const stripHTMLTags = (html = "") =>
  html
    // Replace HTML tags with newlines
    .replace(/<[^>]+>/g, "\n")
    // Collapse multiple newlines
    .replace(/\n\s*\n/g, "\n")
    .trim();

/**
 * Generate a Fuse getFn in order to search against the text content of the HTML generated by RichTextInput fields
 * Strips HTML tags from searched value in order to maintain matchIndices
 * Docs: https://www.fusejs.io/examples.html#nested-search
 */
const richTextField = (
  key: `data.${string}`,
): FuseOptionKeyObject<IndexedNode> => ({
  name: key,
  getFn: (node: IndexedNode) =>
    stripHTMLTags(get(node as Record<string, any>, key)),
});

const basicFields: SearchFacets = [
  "data.text",
  "data.title",
  richTextField("data.description"),
];

const moreInformation: SearchFacets = [
  "data.notes",
  richTextField("data.howMeasured"),
  richTextField("data.policyRef"),
  richTextField("data.info"),
];

const checklist: SearchFacets = ["data.categories.title"];

const nextSteps: SearchFacets = [
  "data.steps.title",
  richTextField("data.steps.description"),
  "data.steps.url",
];

const fileUploadAndLabel: SearchFacets = [
  "data.fileTypes.name",
  "data.fileTypes.moreInformation.notes",
  richTextField("data.fileTypes.moreInformation.howMeasured"),
  richTextField("data.fileTypes.moreInformation.policyRef"),
  richTextField("data.fileTypes.moreInformation.info"),
];

const numberInput: SearchFacets = ["data.units"];

/** List, Page, and MapAndLabel components share this structure */
const schemaComponents: SearchFacets = [
  "data.schemaName",
  // Question title
  "data.schema.fields.data.title",
  // Question description
  "data.schema.fields.data.description",
  // Option title
  "data.schema.fields.data.options.data.text",
  // Option description
  // Currently just string - could be rich text once we have an Editor interface for generating schemas
  "data.schema.fields.data.options.data.description",
];

const taskList: SearchFacets = [
  "data.tasks.title",
  richTextField("data.tasks.description"),
];

const result: SearchFacets = [
  ...flatFlags.flatMap(({ value }) => [
    `data.overrides.${value}.heading`,
    `data.overrides.${value}.description`,
  ]),
];

const content: SearchFacets = [richTextField("data.content")];

const confirmation: SearchFacets = [
  "data.heading",
  richTextField("data.moreInfo"),
  richTextField("data.contactInfo"),
  "data.nextSteps.title",
  "data.nextSteps.description",
];

const findProperty: SearchFacets = [
  "data.newAddressTitle",
  richTextField("data.newAddressDescription"),
  "data.newAddressDescriptionLabel",
];

const drawBoundary: SearchFacets = [
  "data.titleForUploading",
  richTextField("data.descriptionForUploading"),
];

const planningConstraints: SearchFacets = [richTextField("data.disclaimer")];

const pay: SearchFacets = [
  "data.bannerTitle",
  "data.instructionsTitle",
  richTextField("data.instructionsDescription"),
  "data.secondaryPageTitle",
  "data.nomineeTitle",
  richTextField("data.nomineeDescription"),
  "data.yourDetailsTitle",
  richTextField("data.yourDetailsDescription"),
  "data.yourDetailsLabel",
  "data.govPayMetadata.key",
  "data.govPayMetadata.value",
];

const feedback: SearchFacets = [
  richTextField("data.ratingQuestion"),
  richTextField("data.freeformQuestion"),
  richTextField("data.disclaimer"),
];

export const ALL_FACETS: SearchFacets = [
  ...basicFields,
  ...moreInformation,
  ...checklist,
  ...nextSteps,
  ...fileUploadAndLabel,
  ...numberInput,
  ...schemaComponents,
  ...taskList,
  ...result,
  ...content,
  ...confirmation,
  ...findProperty,
  ...drawBoundary,
  ...planningConstraints,
  ...pay,
  ...feedback,
  ...DATA_FACETS,
];
