import ErrorOutline from "@mui/icons-material/ErrorOutline";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import { SendIntegration } from "@opensystemslab/planx-core/types";
import axios, { AxiosResponse } from "axios";
import Bowser from "bowser";
import DelayedLoadingIndicator from "components/DelayedLoadingIndicator/DelayedLoadingIndicator";
import { useStore } from "pages/FlowEditor/lib/store";
import React, { useEffect, useState } from "react";
import { useAsync } from "react-use";
import { AsyncState } from "react-use/lib/useAsyncFn";

import Card from "../shared/Preview/Card";
import { ErrorSummaryContainer } from "../shared/Preview/ErrorSummaryContainer";
import { WarningContainer } from "../shared/Preview/WarningContainer";
import { PublicProps } from "../shared/types";
import { DEFAULT_DESTINATION, getCombinedEventsPayload, Send } from "./model";

/** Response returned by /create-send-events endpoint */
type SendResponse = Record<SendIntegration, { event_id: string }>;

/** State generated by useAsync to hold SendResponse */
type SendRequestState = AsyncState<AxiosResponse<SendResponse>>;

export type Props = PublicProps<Send>;

const SendComponent: React.FC<Props> = ({
  destinations = [DEFAULT_DESTINATION],
  ...props
}) => {
  const teamSlug = useStore().teamSlug;
  const fullProps = { destinations: destinations, ...props };
  if (
    window.location.pathname.endsWith("/draft") ||
    window.location.pathname.endsWith("/preview")
  ) {
    return <SkipSendWarning {...fullProps} />;
  } else if (teamSlug === "demo") {
    return <DemoTeamWarning {...fullProps} />;
  } else {
    return <CreateSendEvents {...fullProps} />;
  }
};

/**
 * Skip queuing up Send events on non-Save&Return layout routes because they don't record lowcal_session data
 */
const SkipSendWarning: React.FC<Props> = (props) => (
  <Card handleSubmit={props.handleSubmit}>
    <WarningContainer>
      <ErrorOutline />
      <Typography variant="body1" ml={2}>
        You can only test submissions on <strong>published routes</strong> where
        Save & Return is enabled. Click "Continue" to finish reviewing content
        and skip submission.
      </Typography>
    </WarningContainer>
  </Card>
);

const DemoTeamWarning: React.FC<Props> = (props) => (
  <Card handleSubmit={props.handleSubmit}>
    <ErrorSummaryContainer role="status">
      <Typography variant="h4" ml={2} mb={1}>
        Send is not enabled for services created in the Demo team
      </Typography>
      <Typography variant="body2" ml={2}>
        Click continue to skip send and proceed with your application for
        testing.
      </Typography>
    </ErrorSummaryContainer>
  </Card>
);

const CreateSendEvents: React.FC<Props> = ({
  destinations = [DEFAULT_DESTINATION],
  ...props
}) => {
  const [passport, sessionId, teamSlug] = useStore((state) => [
    state.computePassport(),
    state.sessionId,
    state.teamSlug,
  ]);

  const [retryCount, setRetryCount] = useState(0);
  const handleRetry = () => {
    console.log("RETRY")
    setRetryCount(prev => prev + 1);
  }

  // Send makes a single request to create scheduled events in Hasura, then those events make the actual submission requests with retries etc
  const url = `${import.meta.env.VITE_APP_API_URL
    }/create-send-events/${sessionId}`;
  const { loading, error, value }: SendRequestState = useAsync(async () => {
    const combinedEventsPayload = getCombinedEventsPayload({
      destinations,
      teamSlug,
      passport,
      sessionId,
    });

    return axios.post(url, combinedEventsPayload);
  }, [retryCount]);

  useEffect(() => {
    const isReady = !loading && !error && value;
    if (!isReady) return;

    // Construct breadcrumb containing IDs of each send event generated
    const data = Object.fromEntries(
      destinations.map((destination) => [
        `${destination}SendEventId`,
        value.data[destination]?.event_id,
      ]),
    );

    const userAgent = Bowser.parse(window.navigator.userAgent); // This is a weird workaround so that we can include platform in `allow_list_answers` in order to pull it through easily in the `submission_services_summary` table
    const referrer = document.referrer || null;
    props.handleSubmit &&
      props.handleSubmit({
        data: {
          ...data,
          "send.analytics.userAgent": userAgent,
          "send.analytics.referrer": referrer,
        },
      });
  }, [loading, error, value, destinations, props]);

  // Throw errors so that they're caught by our error boundaries and Airbrake
  if (error) {
    return (
      <Card handleSubmit={props.handleSubmit}>
        <ErrorSummaryContainer role="status">
          <Typography variant="h4" ml={2} mb={1}>
            Something went wrong
          </Typography>
          <Typography variant="body2" ml={2}>
            There was an issue submitting your application. Please try again.
          </Typography>
          <Button onClick={handleRetry}>Retry</Button>
        </ErrorSummaryContainer>
      </Card>
    );
  }

  if (loading) {
    return (
      <Card>
        <DelayedLoadingIndicator text={"Submitting your application..."} />
      </Card>
    );
  }

  if (value) {
    return (
      <Card>
        <DelayedLoadingIndicator text="Finalising your submission..." />
      </Card>
    );
  }

  return null;
};

export default SendComponent;
