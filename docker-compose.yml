version: "3.8"

# If you change anything here (e.g. environment variables) remember to cascade the change to `infrastructure/`

services:
  postgres:
    image: postgis/postgis:12-3.0-alpine
    restart: unless-stopped
    ports:
      - ${PG_PORT}:5432
    volumes:
      - data:/var/lib/postgresql/data
    command: "postgres -c listen_addresses='*'"
    healthcheck:
      test: pg_isready --username=${PG_USERNAME} --dbname=${PG_DATABASE} --quiet
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_USER: ${PG_USERNAME}

  metabase:
    # if changing, also check infrastructure/application/index.ts
    image: metabase/metabase:v0.43.4
    profiles: ["analytics"]
    ports:
      - "${METABASE_PORT}:${METABASE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--quiet",
          "http://localhost:3000/api/health",
        ]
      interval: 15s
      timeout: 3s
      retries: 10
    environment:
      MB_DB_TYPE: postgres
      MB_DB_CONNECTION_URI: postgres://${PG_USERNAME}:${PG_PASSWORD}@postgres/${PG_DATABASE}
      MB_JETTY_PORT: "${METABASE_PORT}"

  hasura:
    build:
      context: ./hasura.planx.uk
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # https://github.com/hasura/graphql-engine/issues/3371#issuecomment-902515112
      test:
        [
          "CMD",
          "bash",
          "-c",
          "exec 5<>/dev/tcp/127.0.0.1/8080 && echo -e 'GET /healthz HTTP/1.1\n\n' >&5 && cat <&5 | head -n 1 | grep 200",
        ]
      interval: 15s
      timeout: 3s
      retries: 10
    volumes:
      - "./hasura.planx.uk/metadata:/hasura-metadata"
      - "./hasura.planx.uk/migrations:/hasura-migrations"
    restart: unless-stopped
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_CORS_DOMAIN: ${HASURA_GRAPHQL_CORS_DOMAIN}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${PG_USERNAME}:${PG_PASSWORD}@postgres/${PG_DATABASE}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "${JWT_SECRET}" }'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "public"
      HASURA_PLANX_API_KEY: ${HASURA_PLANX_API_KEY}
      HASURA_PLANX_API_URL: ${HASURA_PLANX_API_URL}
  hasura-proxy:
    build:
      context: ./hasura.planx.uk/proxy
      dockerfile: Dockerfile
    depends_on:
      hasura:
        condition: service_healthy
    restart: always
    ports:
      - ${HASURA_PROXY_PORT}:${HASURA_PROXY_PORT}
    environment:
      HASURA_PROXY_PORT: ${HASURA_PROXY_PORT}
      HASURA_NETWORK_LOCATION: "hasura"
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "localhost:$HASURA_PROXY_PORT/healthz"]
      interval: 15s
      timeout: 3s
      retries: 3
  seed-database:
    build:
      context: ./scripts/seed-database
      dockerfile: Dockerfile
    volumes:
       - "./hasura.planx.uk/:/hasura"
    restart: "no"
    depends_on:
      hasura-proxy:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_URL: http://hasura-proxy:7000/v1/graphql
      HASURA_GRAPHQL_ENDPOINT: http://hasura-proxy:7000/
      PRODUCTION_GRAPHQL_URL: 'https://hasura.editor.planx.uk/v1/graphql'
      PG_URL: postgres://${PG_USERNAME}:${PG_PASSWORD}@postgres/${PG_DATABASE}
  api:
    restart: unless-stopped
    build:
      context: ./api.planx.uk
      target: production
    depends_on:
      hasura-proxy:
        condition: service_healthy
    volumes:
      - "./api.planx.uk:/api"
      - "/api/node_modules"
      - "/api/dist"
    ports:
      - ${API_PORT}:${API_PORT}
    healthcheck:
      test:
        ["CMD", "wget", "--spider", "--quiet", "http://localhost:${API_PORT}"]
      interval: 30s
      timeout: 3s
      retries: 5
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_URL: http://hasura-proxy:7000/v1/graphql
      HASURA_METADATA_URL: http://hasura-proxy:7000/v1/metadata 
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      API_URL_EXT: ${API_URL_EXT}
      EDITOR_URL_EXT: ${EDITOR_URL_EXT}
      SESSION_SECRET: ${SESSION_SECRET}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_ACL: ${AWS_S3_ACL}
      PORT: ${API_PORT}
      BOPS_API_ROOT_DOMAIN: ${BOPS_API_ROOT_DOMAIN}
      BOPS_API_TOKEN: ${BOPS_API_TOKEN}
      GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE: ${GOV_UK_PAY_TOKEN_BUCKINGHAMSHIRE}
      GOV_UK_PAY_TOKEN_LAMBETH: ${GOV_UK_PAY_TOKEN_LAMBETH}
      GOV_UK_PAY_TOKEN_SOUTHWARK: ${GOV_UK_PAY_TOKEN_SOUTHWARK}
      AIRBRAKE_PROJECT_ID: ${AIRBRAKE_PROJECT_ID}
      AIRBRAKE_PROJECT_KEY: ${AIRBRAKE_PROJECT_KEY}
      UNIFORM_TOKEN_URL: ${UNIFORM_TOKEN_URL}
      UNIFORM_SUBMISSION_URL: ${UNIFORM_SUBMISSION_URL}
      UNIFORM_CLIENT_AYLESBURY_VALE: ${UNIFORM_CLIENT_AYLESBURY_VALE}
      UNIFORM_CLIENT_CHILTERN: ${UNIFORM_CLIENT_CHILTERN}
      UNIFORM_CLIENT_WYCOMBE: ${UNIFORM_CLIENT_WYCOMBE}
      UNIFORM_CLIENT_LAMBETH: ${UNIFORM_CLIENT_LAMBETH}
      UNIFORM_CLIENT_SOUTHWARK: ${UNIFORM_CLIENT_SOUTHWARK}
      GOVUK_NOTIFY_API_KEY: ${GOVUK_NOTIFY_API_KEY}
      GOVUK_NOTIFY_SAVE_RETURN_EMAIL_TEMPLATE_ID: ${GOVUK_NOTIFY_SAVE_RETURN_EMAIL_TEMPLATE_ID}
      GOVUK_NOTIFY_RESUME_EMAIL_TEMPLATE_ID: ${GOVUK_NOTIFY_RESUME_EMAIL_TEMPLATE_ID}
      GOVUK_NOTIFY_REMINDER_EMAIL_TEMPLATE_ID: ${GOVUK_NOTIFY_REMINDER_EMAIL_TEMPLATE_ID}
      GOVUK_NOTIFY_EXPIRY_EMAIL_TEMPLATE_ID: ${GOVUK_NOTIFY_EXPIRY_EMAIL_TEMPLATE_ID}
      HASURA_PLANX_API_KEY: ${HASURA_PLANX_API_KEY}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}

  sharedb:
    restart: unless-stopped
    build:
      context: ./sharedb.planx.uk
      target: production
    volumes:
      - "./sharedb.planx.uk:/sharedb"
      - "/sharedb/node_modules"
    depends_on:
      hasura-proxy:
        condition: service_healthy
    ports:
      - ${SHAREDB_PORT}:8000
    environment:
      JWT_SECRET: ${JWT_SECRET}
      PG_URL: postgres://${PG_USERNAME}:${PG_PASSWORD}@postgres/${PG_DATABASE}

  minio:
    image: minio/minio:RELEASE.2021-08-31T05-46-54Z
    ports:
      - ${MINIO_PORT}:9000
      - ${MINIO_ADMIN_PORT}:9001
    volumes:
      - ./minio-data:/data
    environment:
      # use these credentials to login the dashboard or upload files as S3 replacement
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_KEY}
    entrypoint: sh
    command: -c "mkdir -p /data/${AWS_S3_BUCKET} && minio server --console-address ':9001' /data"
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  data:
