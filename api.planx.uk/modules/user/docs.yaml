openapi: 3.1.0
info:
  title: Planâœ• API
  version: 0.1.0
tags:
  name: user
  description: User management
components:
  schemas:
    CreateUserSchema:
      type: object
      properties:
        firstName:
          type: string
          example: Bilbo
        lastName:
          type: string
          example: Baggins
        email:
          type: email
          example: bilbo@bagend.sh
        isPlatformAdmin:
          type: bool
          example: false
paths:
  /user:
    put:
      summary: Create a new user
      description: "Requires authentication via a Cloudflare WARP client
        \n\n
        Please login at [https://api.editor.planx.uk/user](https://api.editor.planx.uk/user)"
      tags: ["user"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserSchema"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "500":
          $ref: "#/components/responses/ErrorMessage"
  /user/{email}:
    delete:
      summary: Delete a user
      description: "Requires authentication via a Cloudflare WARP client
        \n\n
        Please login at [https://api.editor.planx.uk/user](https://api.editor.planx.uk/user)"
      tags: ["user"]
      parameters:
        - in: path
          name: email
          type: string
          format: email
          example: bilbo@bagend.sh
          description: Email address of the user to be deleted
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "500":
          $ref: "#/components/responses/ErrorMessage"
  /user/me:
    get:
      summary: Get information about currently logged in user
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    example: 123
                  firstName:
                    type: string
                    example: Albert
                  lastName:
                    type: string
                    example: Einstein
                  email:
                    type: string
                    example: albert@princeton.edu
                  isPlatformAdmin:
                    type: boolean
                    example: true
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        team:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 123
                            slug:
                              type: string
                              example: opensystemslab
                            name:
                              type: string
                              example: Open Systems Lab
                        role:
                          type: string
                          enum: ["teamEditor", "teamViewer"]
                          example: "teamEditor"
        "401":
          $ref: "#/components/responses/Unauthorised"
